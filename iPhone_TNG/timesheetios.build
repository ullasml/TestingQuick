<?xml version="1.0" encoding="utf-8"?>
<project name="TimesheetiosBuildCycle">

  <!-- Entry target -->
  <target name="TimesheetiosBuildCycle" description="Entry point for completing a full build cycle">
    <call target="PrepBuildFolders" />
    <if test="${BuildConfig != 'Release'}">
	  <call target="GetGitCommitCount"/>
    </if>
    <call target="UpdateVersionInfo" />
    <call target="SetTargetFolder" />
    <if test="${BuildConfig == 'Release'}">
      <call target="AppStoreDistributableBuild"/>
    </if>
    <call target="InhouseBuild"/>
    <call target="UpdateOTAPlist"/>
    <call target="CreateManifestFile" />
    <if test="${CopyToNightlies == 'true'}">
       <call target="CopyReleaseFolderToTarget" />
    </if>
  </target>

  <target name="SetProperties" description="These are properties used in multiple targets">
    <tstamp property="BuildStartTime"                     pattern="yyyy-MM-dd@HH-mm-ss"   verbose="true" />
    <property name="build.os"                             value="${operating-system::get-platform(environment::get-operating-system())}" />
    <property name="BuildConfig"                          value=""  readonly="false" />
    <if test="${property::exists('BuildConfig.arg')}">
      <property name="BuildConfig"                        value="${BuildConfig.arg}"  readonly="false" />
    </if>
    <property name="BuildVersion"                         value="${BuildVersion.arg}"/>
    <property name="RIntranet.dir"                        value="/mnt/Nightlies"  readonly="true" />
    <property name="BranchName.Full"                      value="${FullBranchName.arg}"/>
    <property name="ProductName"                          value="timesheet-ios" />
    <property name="BranchName.StartPosition"             value="${string::last-index-of(BranchName.Full,'/')+1}"/>
    <property name="BranchName.Length"                    value="${string::get-length(BranchName.Full)-int::parse(BranchName.StartPosition)}"/>
    <property name="BranchName.Short"                     value="${string::substring(BranchName.Full,int::parse(BranchName.StartPosition),int::parse(BranchName.Length))}" />
    <property name="Project.path"                         value="iPhone_TNG"/>
    <property name="Solution.dir"                         value="${project::get-base-directory()}/${Project.path}"/>
    <!-- Xcode.path must ALWAYS point to a version folder and never to the default install -->
    <property name="Xcode.path"                           value="/Applications/Xcode8.2.1/Xcode.app/Contents/Developer/usr/bin" />
    <property name="SwiftLib.path"                        value="/Applications/Xcode8.2.1/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos" />
    <property name="BuildIdentifier"                      value=""/>
  </target>

  <target name="EchoProperties" description="A target that lists some of the configured properties">
    <echo message="Initialized properties for this build include:" />
    <echo message="------------------------------------------------------------" />
    <echo message="Build start time    : ${BuildStartTime}" />
    <echo message="Product to build    : ${ProductName}" />
    <echo message="Build Configuration : ${BuildConfig}" />
    <echo message="Machine name        : ${environment::get-machine-name()}" />
    <echo message="Full Branch Name    : ${BranchName.Full}"/>
    <echo message="Branch Short Name   : ${BranchName.Short}"/>
    <echo message="GitCommitId         : ${GitCommitId.arg}" />
    <echo message="Project Base.dir    : ${project::get-base-directory()}" />
    <echo message="Xcode path          : ${Xcode.path}"/>
    <echo message="------------------------------------------------------------" />
  </target>

  <!-- Simulator Build -->
  <target name="SimulatorBuild">
    <property name="SDK" value="iphonesimulator" />
    <call target="XCodeCompile" />
    <call target="PackageSimulator" />
    <delete dir="${Solution.dir}/build" />
  </target>

  <!-- App Store Distributable Build -->
  <target name="AppStoreDistributableBuild">
    <property name="CodeIdentity" value="iPhone Distribution: Replicon Inc (MSXS54Z29L)"/>
    <property name="ProvisioningProfile" value="321ad446-43b1-4465-9628-05c256a3bb6e"/>
    <call target="SetProvisioningProfile" />
    <property name="BundleDisplayName" value="Replicon"/>
	<call target="UpdateApplicationIdentifierInfo"/>
    <call target="UnlockKeychain" />
    <property name="SDK" value="iphoneos" />
    <property name="DESTINATION" value="generic/platform=iOS" />
    <call target="XCodeCompile" />
    <call target="PackageAppStore" />
    <!--<delete dir="${Solution.dir}/build" /> -->
  </target>

  <!-- Adhoc developer provisioning profile build -->
  <!-- commenting to fix MI-152
  <target name="AdhocDeveloperBuild">
    <property name="CodeIdentity" value="iPhone Developer: Dipta Rakshit (MSXS54Z29L)"/>
    <property name="ProvisioningProfile" value="7298c37c-fd77-4bb0-81d9-5fe4a91b420c"/>
    <call target="SetProvisioningProfile" />
    <property name="BundleDisplayName" value="Replicon"/>
    <property name="BuildIdentifier" value="debug"/>
    <call target="UpdateApplicationIdentifierInfo"/>
    <call target="UnlockKeychain" />
    <property name="SDK" value="iphoneos" />
    <call target="XCodeCompile" />
    <call target="PackageAdhoc" />
    <delete dir="${Solution.dir}/build" />
  </target>
  -->

  <!-- PackageRepliconInHouseAdhoc provisioning profile build -->
  <target name="InhouseBuild">
    <property name="CodeIdentity" value="iPhone Distribution: Replicon Inc."/>
    <property name="ProvisioningProfile" value="378a56b1-d636-4d41-98e2-5cc1fae95d16"/>
    <call target="SetProvisioningProfile" />
    <property name="BundleDisplayName" value="RepliconBeta"/>
    <property name="BuildConfig" value="Inhouse"/>
    <property name="BuildIdentifier" value=".inhouse"/>
    <call target="UpdateApplicationIdentifierInfo"/>
    <call target="UnlockKeychain" />
    <property name="SDK" value="iphoneos" />
    <property name="DESTINATION" value="generic/platform=iOS" />

    <if test="${RunTests == 'true' }">
    	<call target="BuildAndRunTests" />
    </if>
    <if test="${Run_UI_Tests == 'true' }">
    	<call target="BuildAndRunUITests" />
    </if>

    <call target="XCodeCompile" />
    <call target="PackageInHouse" />
    <!-- <delete dir="${Solution.dir}/build" /> -->
  </target>

  <target name="UpdateOTAPlist">
    <call target="UpdateBuildPathInOTAPlist"/>
    <copy file="${Solution.dir}/OTA/OTA.html" tofile="${Solution.dir}/OTA/OTA1.html">
      <filterchain>
        <replacestring from="link" to="${OTALink.dir}/OTA.plist"/>
      </filterchain>
    </copy>
    <copy file="${Solution.dir}/OTA/OTA1.html" tofile="${Release.dir}/OTA.html" />
    <copy file="${Solution.dir}/OTA/OTA.plist" tofile="${Release.dir}/OTA.plist" />
  </target>

  <target name="UnlockKeychain">
    <loadfile file="/Users/${environment::get-user-name()}/ScriptPwd.text" property="LoginKeyChainAuthentication" />
    <property name="LoginKeyChainAuthentication" value="${string::trim(LoginKeyChainAuthentication)}" />
    <exec program="/usr/bin/security">
      <arg value="unlock-keychain" />
      <arg value="-p" />
      <arg value="${LoginKeyChainAuthentication}" />
      <arg value="/Users/${environment::get-user-name()}/Library/Keychains/login.keychain" />
    </exec>
  </target>

 <target name="BuildAndRunTests">
<!-- Kill the iOS Simulator, if any running, before the test -->
     <exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
       <arg value="iOS Simulator"/>
     </exec>

    <exec program="run-specs" basedir="${project::get-base-directory()}/bin" workingdir="${project::get-base-directory()}/bin">
       <arg value="${project::get-base-directory()}" />
       <arg value="${SIMULATOR1}" />
       <arg value="${OS1}" />
    </exec>

<!-- Kill the iOS Simulator after the test -->
    <exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
      <arg value="iOS Simulator"/>
    </exec>

    <exec program="run-specs" basedir="${project::get-base-directory()}/bin" workingdir="${project::get-base-directory()}/bin">
       <arg value="${project::get-base-directory()}" />
       <arg value="${SIMULATOR2}" />
       <arg value="${OS2}" />
    </exec>

<!-- Kill the iOS Simulator after the test -->
    <exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
      <arg value="iOS Simulator"/>
    </exec>

  </target>

 <target name="BuildAndRunUITests">
<!-- Kill the iOS Simulator, if any running, before the test -->
     <exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
       <arg value="iOS Simulator"/>
     </exec>

    <exec program="run-specs" basedir="${project::get-base-directory()}/bin" workingdir="${project::get-base-directory()}/bin">
       <arg value="${project::get-base-directory()}" />
       <arg value="${SIMULATOR1}" />
       <arg value="${OS1}" />
       <arg value="${UI_TEST_SCHEME}" />
    </exec>

<!-- Kill the iOS Simulator after the test -->
    <!--<exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
      <arg value="iOS Simulator"/>
    </exec>

    <exec program="run-specs" basedir="${project::get-base-directory()}/bin" workingdir="${project::get-base-directory()}/bin">
       <arg value="${project::get-base-directory()}" />
       <arg value="${SIMULATOR2}" />
       <arg value="${OS2}" />
       <arg value="${UI_TEST_SCHEME}" />
    </exec>-->

<!-- Kill the iOS Simulator after the test -->
    <exec program="killall" basedir="/usr/bin" workingdir="${project::get-base-directory()}/bin" failonerror="false" verbose="true">
      <arg value="iOS Simulator"/>
    </exec>

  </target>

 <target name="PackageInHouse">
    <property name="IPA.dir" value="${Solution.dir}/build/Payload"/>
    <mkdir dir="${IPA.dir}"/>
    <copy todir="${IPA.dir}">
      <fileset basedir="${Solution.dir}/build/Build/Products/Inhouse-${SDK}">
        <include name="**/**"/>
      </fileset>
    </copy>
    <zip zipfile="${Release.dir}/timesheet_ios_inhouse.ipa">
      <fileset basedir="${Solution.dir}/build">
        <include name="Payload/**"/>
      </fileset>
    </zip>
   </target>

  <target name="XCodeCompile">
    <exec program="xcodebuild" basedir="${Xcode.path}" workingdir="${Solution.dir}">
      <arg value="-scheme"/>
      <arg value="NextGenRepliconTimeSheet"/>
      <arg value="-destination"/>
      <arg value="${DESTINATION}"/>
      <arg value="-configuration"/>
      <arg value="${BuildConfig}"/>
      <arg value="-derivedDataPath"/>
      <arg value="${Solution.dir}/build"/>
    </exec>
  </target>

  <target name="PackageAppStore">


    <property name="IPA.dir" value="${Solution.dir}/build/Payload"/>
    <mkdir dir="${IPA.dir}"/>

    <exec program="xcodebuild" basedir="${Xcode.path}" workingdir="${Solution.dir}">
      <arg value="archive"/>
      <arg value="-scheme"/>
      <arg value="NextGenRepliconTimeSheet"/>
      <arg value="-sdk"/>
      <arg value="iphoneos"/>
      <arg value="-configuration"/>
      <arg value="${BuildConfig}"/>
      <arg value="-derivedDataPath"/>
      <arg value="${Solution.dir}/build"/>
      <arg value="-archivePath"/>
      <arg value="${Solution.dir}/build/Archive/NextGenRepliconTimeSheet.xcarchive"/>
    </exec>

    <exec program="xcodebuild" basedir="${Xcode.path}" workingdir="${Solution.dir}">
      <arg value="-exportArchive"/>
      <arg value="-archivePath"/>
      <arg value="${Solution.dir}/build/Archive/NextGenRepliconTimeSheet.xcarchive"/>
      <arg value="-exportOptionsPlist"/>
      <arg value="${project::get-base-directory()}/export.plist"/>
      <arg value="-exportPath"/>
      <arg value="${Solution.dir}/build/Payload/"/>
    </exec>

    <zip zipfile="${Release.dir}/timesheet_ios_appstore.zip" includeemptydirs="true">
      <fileset basedir="${Solution.dir}/build">
            <include name="Payload/**"/>
      </fileset>
    </zip>
 </target>

<!-- commenting for fixing MI-152
  <target name="PackageAdhoc">
    <zip zipfile="${Release.dir}/timesheet_ios_adhoc.zip">
      <fileset basedir="${Solution.dir}/build/Build/Products/Release-${SDK}">
        <include name="**/**"/>
      </fileset>
    </zip>
  </target>
-->


  <target name="PackageSimulator">
    <script language="C#" prefix="build" >
      <code>
        <![CDATA[
       [Function("generate-guid")]
       public static string GenerateGuid()
       {
       return System.Guid.NewGuid().ToString("D").ToUpper();
       }
       ]]>
      </code>
    </script>
    <property name="SimulatorGuid" value="${build::generate-guid()}" />
    <property name="SimulatorPackageDir" value="${Solution.dir}/build/Build/Products/${SimulatorGuid}"/>
    <mkdir dir="${SimulatorPackageDir}"/>
    <move todir="${SimulatorPackageDir}">
      <fileset basedir="${Solution.dir}/build/Build/Products/Release-${SDK}">
        <include name="**/**"/>
      </fileset>
    </move>
    <zip zipfile="${Release.dir}/timesheet_ios_simulator.zip">
      <fileset basedir="${Solution.dir}/build">
        <include name="${SimulatorGuid}/**"/>
      </fileset>
    </zip>
  </target>


  <target name="UpdateVersionInfo">

    <if test="${BuildConfig == 'Inhouse' }">
      <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleVersion']/following-sibling::string[1]" value="${BuildVersion}" />
      <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleShortVersionString']/following-sibling::string[1]" value="${version::get-major(version::parse(BuildVersion))}.${version::get-minor(version::parse(BuildVersion))}.${version::get-build(version::parse(BuildVersion))}" />
    </if>
    <if test="${BuildConfig == 'Release'}" >
      <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleVersion']/following-sibling::string[1]" value="${BuildVersion}" />
      <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleShortVersionString']/following-sibling::string[1]" value="${version::get-major(version::parse(BuildVersion))}.${version::get-minor(version::parse(BuildVersion))}.${version::get-build(version::parse(BuildVersion))}" />
    </if>

    <!-- NAnt's xmlpoke corrupts the DOCTYPE line of the XML file, which has to be repaired... -->
    <script language="C#" prefix="test" >
      <code>
        <![CDATA[
        [TaskName("uncorruptplist")]
        public class UncorruptPlistFile : Task
        {
           [TaskAttribute("filename", Required=true)]
           public string FileName
           {
               get;
               set;
           }
           protected override void ExecuteTask()
           {
               string data;
               using (var input = new System.IO.StreamReader(FileName, System.Text.Encoding.UTF8))
                   data = input.ReadToEnd();
               data = data.Replace("PropertyList-1.0.dtd\"[]>", "PropertyList-1.0.dtd\">");
               using (var output = new System.IO.StreamWriter(FileName, false, System.Text.Encoding.UTF8))
                   output.Write(data);
               Log(Level.Info, System.String.Format("Uncorrupted plist file {0}", FileName));
           }
        }
        ]]>
      </code>
    </script>
    <uncorruptplist filename="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" />
  </target>

  <target name="UpdateBuildPathInOTAPlist">
    <xmlpoke file="${Solution.dir}/OTA/OTA.plist" xpath="/plist/dict/array/dict/array/dict/key[text()='url']/following-sibling::string[1]" value="${BuildPathInOTAPlist}" />
    <!-- NAnt's xmlpoke corrupts the DOCTYPE line of the XML file, which has to be repaired... -->
    <script language="C#" prefix="test" >
      <code>
        <![CDATA[
        [TaskName("uncorruptplist")]
        public class UncorruptPlistFile : Task
        {
            [TaskAttribute("filename", Required=true)]
            public string FileName
            {
                get;
                set;
            }
            protected override void ExecuteTask()
            {
                string data;
                using (var input = new System.IO.StreamReader(FileName, System.Text.Encoding.UTF8))
                    data = input.ReadToEnd();
                data = data.Replace("PropertyList-1.0.dtd\"[]>", "PropertyList-1.0.dtd\">");
                using (var output = new System.IO.StreamWriter(FileName, false, System.Text.Encoding.UTF8))
                    output.Write(data);
                Log(Level.Info, System.String.Format("Uncorrupted plist file {0}", FileName));
            }
        }
        ]]>
      </code>
    </script>
    <uncorruptplist filename="${Solution.dir}/OTA/OTA.plist" />
  </target>

  <target name="UpdateApplicationIdentifierInfo">
    <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleIdentifier']/following-sibling::string[1]" value="com.replicon.nextgenreplicontimesheet.NextGenRepliconTimeSheet${BuildIdentifier}" />
    <xmlpoke file="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" xpath="/plist/dict/key[text()='CFBundleDisplayName']/following-sibling::string[1]" value="${BundleDisplayName}" />
    <!-- NAnt's xmlpoke corrupts the DOCTYPE line of the XML file, which has to be repaired... -->
    <script language="C#" prefix="test" >
      <code>
        <![CDATA[
          [TaskName("uncorruptplist")]
          public class UncorruptPlistFile : Task
          {
              [TaskAttribute("filename", Required=true)]
              public string FileName
              {
                  get;
                  set;
              }
              protected override void ExecuteTask()
              {
                  string data;
                  using (var input = new System.IO.StreamReader(FileName, System.Text.Encoding.UTF8))
                    data = input.ReadToEnd();
                  data = data.Replace("PropertyList-1.0.dtd\"[]>", "PropertyList-1.0.dtd\">");
                  using (var output = new System.IO.StreamWriter(FileName, false, System.Text.Encoding.UTF8))
                    output.Write(data);
                  Log(Level.Info, System.String.Format("Uncorrupted plist file {0}", FileName));
              }
          }
          ]]>
      </code>
    </script>
    <uncorruptplist filename="${Solution.dir}/NextGenRepliconTimeSheet/NextGenRepliconTimeSheet-Info.plist" />
  </target>

  <target name="SetProvisioningProfile">
    <property name="Target" value="${Solution.dir}/NextGenRepliconTimeSheet.xcodeproj/project.pbxproj"/>
    <script language="C#" prefix="test" >
      <references>
        <include name="System.Text" />
      </references>
      <imports>
        <import namespace="System.IO"/>
        <import namespace="System.Text"/>
      </imports>
      <code>
        <![CDATA[
            [TaskName("setprofile")]
            public class SetProvisioningProfile : Task
            {
                private static System.Text.RegularExpressions.Regex codeSign1 =
                    new System.Text.RegularExpressions.Regex("CODE_SIGN_IDENTITY = \".*\";", System.Text.RegularExpressions.RegexOptions.None);
                private static System.Text.RegularExpressions.Regex codeSign2 =
                    new System.Text.RegularExpressions.Regex("\"CODE_SIGN_IDENTITY\\[sdk=iphoneos\\*\\]\" = \".*\";", System.Text.RegularExpressions.RegexOptions.None);
                private static System.Text.RegularExpressions.Regex identity1 =
                    new System.Text.RegularExpressions.Regex("PROVISIONING_PROFILE = \".*\";", System.Text.RegularExpressions.RegexOptions.None);
                private static System.Text.RegularExpressions.Regex identity2 =
                    new System.Text.RegularExpressions.Regex("\"PROVISIONING_PROFILE\\[sdk=iphoneos\\*\\]\" = \".*\";", System.Text.RegularExpressions.RegexOptions.None);

                [TaskAttribute("filename", Required=true)]
                public string FileName
                {
                    get;
                    set;
                }
                [TaskAttribute("identity", Required=true)]
                public string CodeSignIdentity
                {
                    get;
                    set;
                }
                [TaskAttribute("profile", Required=true)]
                public string ProvisioningProfile
                {
                    get;
                    set;
                }
                protected override void ExecuteTask()
                {
                    string data;
                    using (var input = new System.IO.StreamReader(FileName, System.Text.Encoding.UTF8))
                      data = input.ReadToEnd();
                    data = codeSign1.Replace(data, "CODE_SIGN_IDENTITY = \"" + CodeSignIdentity + "\";");
                    data = codeSign2.Replace(data, "\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\" = \"" + CodeSignIdentity + "\";");
                    data = identity1.Replace(data, "PROVISIONING_PROFILE = \"" + ProvisioningProfile + "\";");
                    data = identity2.Replace(data, "\"PROVISIONING_PROFILE[sdk=iphoneos*]\" = \"" + ProvisioningProfile + "\";");

                    using (var output = new System.IO.StreamWriter(FileName, false, new System.Text.UTF8Encoding(false)))
                      output.Write(data);
                    Log(Level.Info, System.String.Format("Installed code signing identity & provisioning profile into {0}", FileName));
                }
              }
            ]]>
      </code>
    </script>
    <setprofile filename="${Target}" identity="${CodeIdentity}" profile="${ProvisioningProfile}"/>
  </target>

  <target name="PrepBuildFolders" description="Create necessary temp folders for build process">
    <property name="Holding.dir" value="${Solution.dir}/Holding" />
    <delete dir="${Holding.dir}" if="${directory::exists(Holding.dir)}" />
    <mkdir dir="${Holding.dir}" />

    <property name="Release.dir" value="${Solution.dir}/Release" />
    <delete dir="${Release.dir}" if="${directory::exists(Release.dir)}" />
    <mkdir dir="${Release.dir}" />
  </target>

  <target name="SetTargetFolder">
    <property name="Target.dir" value="${RIntranet.dir}/${ProductName}/[${BranchName.Short}_${BuildStartTime}_${BuildVersion}]" />
    <property name="OTALink.dir" value="https://devbuilds.replicon.com/Nightlies/${ProductName}/[${BranchName.Short}_${BuildStartTime}_${BuildVersion}]"/>
    <property name="BuildPathInOTAPlist" value="https://devbuilds.replicon.com/Nightlies/${ProductName}/[${BranchName.Short}_${BuildStartTime}_${BuildVersion}]/timesheet_ios_inhouse.ipa"/>
    <if test="${string::starts-with(BuildConfig,'Release')}">
      <property name="Target.dir" value="${RIntranet.dir}/${ProductName}/[${BuildVersion}]" />
      <property name="OTALink.dir" value="https://devbuilds.replicon.com/Nightlies/${ProductName}/[${BuildVersion}]"/>
      <property name="BuildPathInOTAPlist" value="https://devbuilds.replicon.com/Nightlies/${ProductName}/[${BuildVersion}]/timesheet_ios_inhouse.ipa"/>
    </if>
    <echo message="Target.dir = ${Target.dir}" />
  </target>

  <target name="CopyReleaseFolderToTarget">
    <echo message="Coping all the files from the ${Release.dir} to ${Target.dir}" />
    <copy todir="${Target.dir}" verbose="true">
      <fileset basedir="${Release.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <target name="CreateManifestFile" description="Write the manifest file">
    <echo message="Create the manifest file" />
    <property name="Manifest.file"                                                        value="${Release.dir}/File_Id.diz" />
    <echo message="-----------------${environment::newline()}"                            file="${Manifest.file}" append="true" />
    <echo message="Product Name  : ${ProductName}${environment::newline()}"               file="${Manifest.file}" append="true" />
    <echo message="Branch name   : ${BranchName.Short}${environment::newline()}"          file="${Manifest.file}" append="true" />
    <echo message="Build Config  : ${BuildConfig}${environment::newline()}"               file="${Manifest.file}" append="true" />
    <echo message="Git commit Id : ${GitCommitId.arg}${environment::newline()}"           file="${Manifest.file}" append="true" />
	<echo message="Build Version : ${BuildVersion}${environment::newline()}"              file="${Manifest.file}" append="true" />
    <echo message="-----------------${environment::newline()}"                            file="${Manifest.file}" append="true" />
  </target>

  <target name="GetGitCommitCount">
    <exec program="/usr/bin/git" workingdir="${Solution.dir}" output="GitCommitCount.file">
	  <arg value="rev-list"/>
	  <arg value="HEAD"/>
	  <arg value="--count"/>
	</exec>
	<loadfile file="GitCommitCount.file" property="Git.Commit.Count" />
	<property name="GitCommitCount" value="${string::trim(Git.Commit.Count)}" />
	<property name="BuildVersion"  value="${BuildVersion}.${GitCommitCount}"  readonly="false" />
	<echo message="Git commit count :${GitCommitCount}"/>
  </target>
</project>
